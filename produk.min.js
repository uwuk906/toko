document.addEventListener('DOMContentLoaded', function() {
    // ==================== STATE APLIKASI ====================
    let allProducts = [];
    let cart = []; // Keranjang belanja
    const API_URL = '/api/products';

    // ==================== SELEKSI ELEMEN DOM ====================
    const productsGrid = document.getElementById('productsGrid');
    const searchInput = document.getElementById('searchInput');
    const categoryFilter = document.getElementById('categoryFilter');
    const cartCount = document.querySelector('.cart-count');
    const orderForm = document.getElementById('orderForm');
    const orderItemsTextarea = document.getElementById('orderItems');
    const orderTotalInput = document.getElementById('orderTotal');

    // ==================== FUNGSI-FUNGSI UTAMA ====================

    // FUNGSI BARU UNTUK MEMBUAT RATING BINTANG
    function createRatingStars(rating) {
        if (!rating || rating <= 0) {
            return '<div class="rating" style="min-height: 1em;"></div>'; // Beri tinggi agar layout tidak rusak
        }
        let starsHTML = '<div class="rating">';
        const fullStars = Math.floor(rating);
        const halfStar = rating % 1 >= 0.5;
        const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);

        for (let i = 0; i < fullStars; i++) {
            starsHTML += '<i class="fas fa-star"></i>';
        }
        if (halfStar) {
            starsHTML += '<i class="fas fa-star-half-alt"></i>';
        }
        for (let i = 0; i < emptyStars; i++) {
            starsHTML += '<i class="far fa-star"></i>';
        }
        starsHTML += '</div>';
        return starsHTML;
    }

    // Fungsi untuk membuat elemen HTML setiap produk (SUDAH DIPERBARUI)
    function createProductElement(product) {
        const productDiv = document.createElement('div');
        productDiv.className = 'product';
        const priceHTML = product.discount ? `<s>Rp${product.discount.toLocaleString('id-ID')}</s> <h3 class="product-price-final">Rp${product.price.toLocaleString('id-ID')}</h3>` : `<h3 class="product-price-final">Rp${product.price.toLocaleString('id-ID')}</h3>`;
        const imageSrc = product.image ? `/${product.image}` : 'images/default.png';
        const ratingHTML = createRatingStars(product.rating); // <-- Kode untuk memanggil fungsi rating

        productDiv.innerHTML = `
            <div class="product-header">
                <img src="${imageSrc}" alt="${product.name}" loading="lazy">
            </div>
            <div class="product-footer">
                <p class="product-category">${product.category || 'Tanpa Kategori'}</p>
                <h3 class="product-name">${product.name}</h3>
                ${ratingHTML} <div class="product-price">${priceHTML}</div>
                <p>Stok: ${product.stock}</p>
            </div>
            <button class="btn add-to-cart-btn" data-id="${product.id}" ${product.stock <= 0 ? 'disabled' : ''}>
                ${product.stock > 0 ? 'Tambah ke Keranjang' : 'Stok Habis'}
            </button>`;
        return productDiv;
    }

    // Fungsi untuk menampilkan produk ke dalam grid
    function renderProducts(products) {
        if (!productsGrid) return;
        productsGrid.innerHTML = '';
        if (products.length === 0) {
            productsGrid.innerHTML = `<p class="no-products" style="grid-column: 1 / -1; text-align: center;">Produk tidak ditemukan.</p>`;
            return;
        }
        products.forEach(product => {
            productsGrid.appendChild(createProductElement(product));
        });
    }

    // === LOGIKA KERANJANG BELANJA ===
    function addToCart(productId) {
        const productToAdd = allProducts.find(p => p.id === productId);
        if (!productToAdd || productToAdd.stock <= 0) {
            alert('Stok produk habis!');
            return;
        }

        const existingItem = cart.find(item => item.id === productId);
        if (existingItem) {
            existingItem.quantity++;
        } else {
            cart.push({ ...productToAdd, quantity: 1 });
        }
        // Panggil kedua fungsi update setelah item ditambahkan
        updateCartCounter();
        updateOrderForm();
    }

    function updateCartCounter() {
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        if(cartCount) cartCount.textContent = totalItems;
    }

    // === LOGIKA FORM WHATSAPP ===
    function updateOrderForm() {
        if (!orderItemsTextarea || !orderTotalInput) return;
        
        const itemsText = cart.map(item => `- ${item.name} (x${item.quantity})`).join('\n');
        const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        
        orderItemsTextarea.value = itemsText;
        orderTotalInput.value = `Rp ${total.toLocaleString('id-ID')}`;
    }

    function handleOrderSubmit(e) {
        e.preventDefault();
        const name = document.getElementById('customerName').value;
        const phone = document.getElementById('customerPhone').value;
        const address = document.getElementById('customerAddress').value;

        if (cart.length === 0) {
            alert('Keranjang Anda kosong. Silakan pilih produk terlebih dahulu.');
            return;
        }

        const items = orderItemsTextarea.value;
        const total = orderTotalInput.value;
        const adminPhone = '6283114925705';

        const message = `Halo SembakoModern, saya ingin memesan:\n\n*Pesanan:*\n${items}\n\n*Total: ${total}*\n\n*Data Pemesan:*\nNama: ${name}\nNo. HP/WA: ${phone}\nAlamat Pengiriman: ${address}\n\nTerima kasih.`;
        
        const whatsappURL = `https://wa.me/${adminPhone}?text=${encodeURIComponent(message)}`;
        window.open(whatsappURL, '_blank');
    }

    // === FUNGSI FILTER & PENCARIAN ===
    function populateFilter() {
        const categories = [...new Set(allProducts.map(p => p.category).filter(Boolean))];
        if (categoryFilter) {
            categoryFilter.innerHTML = '<option value="all">Semua Kategori</option>';
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categoryFilter.appendChild(option);
            });
        }
    }

    function filterAndRender() {
        let filtered = [...allProducts];
        if(searchInput) {
            const searchTerm = searchInput.value.toLowerCase();
            if (searchTerm) {
                filtered = filtered.filter(p => p.name.toLowerCase().includes(searchTerm));
            }
        }
        if(categoryFilter) {
            const selectedCategory = categoryFilter.value;
            if (selectedCategory !== 'all') {
                filtered = filtered.filter(p => p.category === selectedCategory);
            }
        }
        renderProducts(filtered);
    }
    
    // === EVENT LISTENERS ===
    if (productsGrid) {
        productsGrid.addEventListener('click', (e) => {
            if (e.target.classList.contains('add-to-cart-btn')) {
                const productId = parseInt(e.target.dataset.id);
                addToCart(productId);
            }
        });
    }

    if (orderForm) {
        orderForm.addEventListener('submit', handleOrderSubmit);
    }

    if (searchInput) {
        searchInput.addEventListener('input', filterAndRender);
    }

    if (categoryFilter) {
        categoryFilter.addEventListener('change', filterAndRender);
    }

    // === INISIALISASI ===
    async function init() {
        if (productsGrid) {
            try {
                const response = await fetch(API_URL);
                if (!response.ok) throw new Error('Server tidak merespon.');
                allProducts = await response.json();
                populateFilter();
                renderProducts(allProducts);
            } catch (error) {
                productsGrid.innerHTML = `<p style="color: red; grid-column: 1 / -1; text-align: center;">Gagal memuat produk. Pastikan server backend berjalan.</p>`;
            }
        }
    }
    
    init();
});